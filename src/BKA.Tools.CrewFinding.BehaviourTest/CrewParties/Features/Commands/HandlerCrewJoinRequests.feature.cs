// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BKA.Tools.CrewFinding.BehaviourTest.CrewParties.Features.Commands
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CaptainManagesJoinRequestsToTheCrewParty_Feature : object, Xunit.IClassFixture<CaptainManagesJoinRequestsToTheCrewParty_Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "HandlerCrewJoinRequests.feature"
#line hidden
        
        public CaptainManagesJoinRequestsToTheCrewParty_Feature(CaptainManagesJoinRequestsToTheCrewParty_Feature.FixtureData fixtureData, BKA_Tools_CrewFinding_BehaviourTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CrewParties/Features/Commands", "Captain manages join requests to the Crew Party.", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Captain approves a join request")]
        [Xunit.TraitAttribute("FeatureTitle", "Captain manages join requests to the Crew Party.")]
        [Xunit.TraitAttribute("Description", "Captain approves a join request")]
        [Xunit.InlineDataAttribute("Rowan", "Allan", "Rowan\'s Crew Party", new string[0])]
        public void CaptainApprovesAJoinRequest(string captainHandle, string playerHandle, string crewPartyName, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CaptainHandle", captainHandle);
            argumentsOfScenario.Add("PlayerHandle", playerHandle);
            argumentsOfScenario.Add("CrewPartyName", crewPartyName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Captain approves a join request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
        testRunner.Given(string.Format("a captain with username of {0}", captainHandle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
        testRunner.And(string.Format("the captain has a not full Crew Party named {0}", crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
        testRunner.And(string.Format("a join request from {0} for the Crew Party {1}", playerHandle, crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
        testRunner.When("the captain approves the join request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
        testRunner.Then(string.Format("{0} is added to {1}", playerHandle, crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
        testRunner.And(string.Format("a notification is sent to {0} saying Your request to join {1} has been approved.", playerHandle, crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Captain rejects a join request")]
        [Xunit.TraitAttribute("FeatureTitle", "Captain manages join requests to the Crew Party.")]
        [Xunit.TraitAttribute("Description", "Captain rejects a join request")]
        [Xunit.InlineDataAttribute("Rowan", "Allan", "Rowan\'s Crew Party", new string[0])]
        public void CaptainRejectsAJoinRequest(string captainHandle, string playerHandle, string crewPartyName, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CaptainHandle", captainHandle);
            argumentsOfScenario.Add("PlayerHandle", playerHandle);
            argumentsOfScenario.Add("CrewPartyName", crewPartyName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Captain rejects a join request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
        testRunner.Given(string.Format("a captain with username of {0}", captainHandle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
        testRunner.And(string.Format("a Crew Party named {0} with a captain of {1}", crewPartyName, captainHandle), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
        testRunner.And(string.Format("a join request from {0} for the Crew Party {1}", playerHandle, crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
        testRunner.When("the captain rejects the join request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
        testRunner.Then(string.Format("{0} is not added to {1}", playerHandle, crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
        testRunner.And(string.Format("a notification is sent to {0} saying Your request to join {1} has been rejected.", playerHandle, crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Captain does not respond to a join request in time")]
        [Xunit.TraitAttribute("FeatureTitle", "Captain manages join requests to the Crew Party.")]
        [Xunit.TraitAttribute("Description", "Captain does not respond to a join request in time")]
        [Xunit.InlineDataAttribute("Rowan", "Allan", "Rowan\'s Crew Party", "30", new string[0])]
        [Xunit.InlineDataAttribute("Rowan", "Allan", "Rowan\'s Crew Party", "40", new string[0])]
        public void CaptainDoesNotRespondToAJoinRequestInTime(string captainHandle, string playerHandle, string crewPartyName, string requestedAt, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CaptainHandle", captainHandle);
            argumentsOfScenario.Add("PlayerHandle", playerHandle);
            argumentsOfScenario.Add("CrewPartyName", crewPartyName);
            argumentsOfScenario.Add("RequestedAt", requestedAt);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Captain does not respond to a join request in time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
        testRunner.Given(string.Format("a join request from {0} for the Crew Party {1} at {2} minutes ago", playerHandle, crewPartyName, requestedAt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
        testRunner.And("the captain does not respond within the designated time frame of \'30\' minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
        testRunner.Then("the join request is automatically declined by the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
        testRunner.And(string.Format("a notification is sent to {0} saying Your request to join {1} has expired.", playerHandle, crewPartyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CaptainManagesJoinRequestsToTheCrewParty_Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CaptainManagesJoinRequestsToTheCrewParty_Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
